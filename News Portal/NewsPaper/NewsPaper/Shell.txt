from news.models import *

# 1 Создать двух пользователей (с помощью метода User.objects.create_user('username')).

user1 = User.objects.create_user('Гена')
user2 = User.objects.create_user('Чебурашка')

#2 Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(user=user1)
Author.objects.create(user=user2)

#3 Добавить 4 категории в модель Category.

Category.objects.create(name_category = 'Политика')
Category.objects.create(name_category = 'Спорт')
Category.objects.create(name_category = 'Охота')
Category.objects.create(name_category = 'Путешествия')

#4 Добавить 2 статьи и 1 новость.

author = Author.objects.get(id=1)
Post.objects.create(author=author, post_type='NW', post_title='ЦСКА против Зенита', post_text='Марио Фернандес игрок Зенита')
Post.objects.create(author=author, post_type='AR', post_title='Путешествия по Росии', post_text='10 мест кторые Вас удевят')
author2 = Author.objects.get(id=2)
Post.objects.create(author=author2, post_type='AR', post_title='Цены', post_text='Сколько стоит сьездить в Китай?')


#5 Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий):

p1 = Post.objects.get(id=2)
p1.post_category.add(Category.objects.get(id=3))
p1.post_category.add(Category.objects.get(id=4))

p2 = Post.objects.get(id=3)
p2.post_category.add(Category.objects.get(id=1))
p2.post_category.add(Category.objects.get(id=3))

p3 = Post.objects.get(id=1)
p3.post_category.add(Category.objects.get(id=2))

#6 Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий):

Comment.objects.create(post=Post.objects.get(id=1), user=User.objects.get(username='Гена'), comment_text='Не ожидал от Фернандеса')
Comment.objects.create(post=Post.objects.get(id=2), user=User.objects.get(username='Чебурашка'), comment_text='Вот бы куда нибудь сьездить')
Comment.objects.create(post=Post.objects.get(id=3), user=User.objects.get(username='Гена'), comment_text='Рис там готовят?')
Comment.objects.create(post=Post.objects.get(id=1), user=User.objects.get(username='Чебурашка'), comment_text='А как же теперь ЦСКА?')

#7 Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Комментарии
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).dislike()
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).like()
Comment.objects.get(id=3).like()
Comment.objects.get(id=3).like()
Comment.objects.get(id=1).dislike()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=4).like()

Посты
Post.objects.get(id=1).dislike()
Post.objects.get(id=2).like()
Post.objects.get(id=3).like()
Post.objects.get(id=3).like()

#8 Обновить рейтинги пользователей:

a = Author.objects.get(user=u1)
a.update_rating()
a = Author.objects.get(user=u2)
a.update_rating()

#9 Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):

Author.objects.order_by('author_rating').last().user.username
Author.objects.order_by('author_rating').last().author_rating

#10 Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи,
основываясь на лайках/дислайках к этой статье:

a = Post.objects.order_by('-post_rating').first()
a.created_at
a.author.user
a.post_rating
a.post_title
a.preview()

#11 Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье:

comments = Comment.objects.all().filter(post_id=a.id)
for comment in comments:
    print(comment.created_at)
    print(User.objects.get(id=comment.user_id))
    print(comment.comment_rating)
    print(comment.comment_text)